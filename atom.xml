<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>葛鹏程|blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aventador.top/"/>
  <updated>2019-02-04T06:40:38.061Z</updated>
  <id>http://aventador.top/</id>
  
  <author>
    <name>葛鹏程</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue入门（一）：项目搭建</title>
    <link href="http://aventador.top/posts/c9a8d1ea.html"/>
    <id>http://aventador.top/posts/c9a8d1ea.html</id>
    <published>2019-02-03T13:34:05.000Z</published>
    <updated>2019-02-04T06:40:38.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我的JS水平比较一般，而且还是跨专业半路出家，因此学习是唯一出路。vue并不是我接触的第一个前端框架，之前学习过angular1.x，觉得不太容易，结果没多久2版本就推出了，一看文档：<code>totally rewrite</code>。WTF？？？1还没学利索呢，2就重写了？从此抛弃angular。<br>直到后来，公司需要做个管理后台系统，经过一番比较最终选择了vue，原因：</p><blockquote><ul><li>angular已拉黑</li><li>react里的jsx语法一时不容易掌握</li><li>vue学习成本较低，简单易上手，性能也很优秀</li></ul></blockquote><p>二话不说立马上手，我之前的项目都是通过vue-cli创建的，而其中的webpack配置并不特别贴合项目中的要求，由于我之前已经写了webpack系列的博文，所以在这里就从0-1搭建一个vue项目。</p><h1 id="1-开始"><a href="#1-开始" class="headerlink" title="1. 开始"></a>1. 开始</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue vue-router -S</span><br></pre></td></tr></table></figure><p>在项目中我们使用 <strong>.vue</strong> 文件进行开发，所以还要安装一些工具：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader vue-style-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure></p><h2 id="1-2-整理目录"><a href="#1-2-整理目录" class="headerlink" title="1.2 整理目录"></a>1.2 整理目录</h2><p>打开我们之前的webpack项目，删除 <strong>src</strong> 目录下的所有文件，并在其下创建 <strong>asset</strong> 文件夹，用来放置资源文件；<strong>pages</strong> 文件夹，来放置我们的页面文件；<strong>router</strong> 文件夹，路由配置；<strong>http</strong> 文件夹，ajax请求配置；<strong>app.js</strong> 入口文件，还有一个 <strong>app.vue</strong> 文件，如图所示：<br><img src="https://upload-images.jianshu.io/upload_images/2012934-f633969284748524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录"><br>然后就可以写代码啦………</p><h1 id="2-下面正式写代码"><a href="#2-下面正式写代码" class="headerlink" title="2. 下面正式写代码"></a>2. 下面正式写代码</h1><h2 id="2-1-认识-vue-文件"><a href="#2-1-认识-vue-文件" class="headerlink" title="2.1 认识 .vue 文件"></a>2.1 认识 <strong>.vue</strong> 文件</h2><p>这个 <strong>.vue</strong> 文件是啥呢，官方文档大概是这么说的：</p><blockquote><p>在很多 Vue 项目中，我们使用 <code>Vue.component</code> 来定义全局组件，紧接着用 <code>new Vue({ el: &#39;#container &#39;})</code> 在每个页面内指定一个容器元素。<br>这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：</p><ul><li>全局定义 (Global definitions) 强制要求每个 component 中的命名不得重复<br>字符串模板 (String templates) 缺乏语法高亮</li><li>不支持 CSS (No CSS support) 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li>没有构建步骤 (No build step) 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Babel</li></ul></blockquote><p>文件扩展名为 .vue 的 single-file components(单文件组件) 为以上所有问题提供了解决方法，并且还可以使用 webpack等构建工具。</p><p>这是一个文件名为 Hello.vue 的简单实例：<br><img src="https://upload-images.jianshu.io/upload_images/2012934-d465c96f488d3961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue-component.png"></p><p>编写 <strong>app.vue</strong> 文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>&#123;&#123;text &#125;&#125; this is main<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      text: 'hello world'</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">    console.log('app is mounted')</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .red &#123;</span></span><br><span class="line"><span class="undefined">    color: red;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编写入口文件 <strong>app.js</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(App)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="2-2-配置webpack"><a href="#2-2-配置webpack" class="headerlink" title="2.2 配置webpack"></a>2.2 配置webpack</h2><p>在 config 目录下创建 <strong>vue-loader.config.js</strong> ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue-loader.config.js </span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">isDev</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    preserveWhiteSpace: <span class="literal">true</span>,</span><br><span class="line">    extractCss: !isDev,</span><br><span class="line">    cssModules: &#123;</span><br><span class="line">      localIdentName: isDev ? <span class="string">'[path]-[name]-[hash:base64:5]'</span> : <span class="string">'[hash:base64:5]'</span>,</span><br><span class="line">      camelCase: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    hotReload: isDev <span class="comment">//根据环境变量生成</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改 <strong>webpack.config.js</strong> ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入vue-loader.config</span></span><br><span class="line"><span class="keyword">const</span> createVueLoaderOptions = <span class="built_in">require</span>(<span class="string">'./vue-loader.config'</span>)</span><br><span class="line"><span class="comment">// 引入VueLoaderPlugin</span></span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改入口</span></span><br><span class="line">entry: &#123;</span><br><span class="line">    app: path.join(__dirname, <span class="string">'../src/app.js'</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改loaders配置</span></span><br><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: createVueLoaderOptions(isDev)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          isDev ? <span class="string">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span>, <span class="attr">options</span>: &#123; <span class="attr">importLoaders</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">          <span class="string">'postcss-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          isDev ? <span class="string">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加VueLoaderPlugin</span></span><br><span class="line"><span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line"><span class="comment">// 修改HtmlWebpackPlugin</span></span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.join(__dirname, <span class="string">'../app.html'</span>),</span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>至此，所有配置完毕，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>如果配置没错，项目就成功跑起来了<br><img src="https://upload-images.jianshu.io/upload_images/2012934-f557243502fc27d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image 3.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我的JS水平比较一般，而且还是跨专业半路出家，因此学习是唯一出路。vue并不是我接触的第一个前端框架，之前学习过angular1.x，觉得不
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vue" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/vue/"/>
    
    
      <category term="vue" scheme="http://aventador.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（九）：开发环境和生产环境</title>
    <link href="http://aventador.top/posts/8d0369c8.html"/>
    <id>http://aventador.top/posts/8d0369c8.html</id>
    <published>2019-02-02T13:26:25.000Z</published>
    <updated>2019-02-03T09:46:30.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-构建开发环境"><a href="#1-构建开发环境" class="headerlink" title="1. 构建开发环境"></a>1. 构建开发环境</h1><p>如果你一直跟随我前面的博文，那么你对webpack的基础知识已经有比较深刻的理解了。之前，我们一直执行着：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p>来打包编译输出我们的代码，本文我们来看看如何构建一个开发环境，来使我们的开发变得方便些。</p><h2 id="1-1-webpack-dev-server"><a href="#1-1-webpack-dev-server" class="headerlink" title="1.1 webpack-dev-server"></a>1.1 webpack-dev-server</h2><p>webpack-dev-server是一个简单的小型的web服务器，并且能够实时重载，配置也很简单，首先安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure></p><p>配置webpack.config.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    port: <span class="number">8080</span>,  <span class="comment">// 端口号</span></span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 主机名，设为该值可通过IP访问</span></span><br><span class="line">    overlay: &#123;</span><br><span class="line">      errors: <span class="literal">true</span> <span class="comment">// 错误提示</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在package.json中添加命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --config config/webpack.config.js"</span></span><br></pre></td></tr></table></figure></p><p>执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>可见我们的服务已经跑起来了：<br><img src="https://upload-images.jianshu.io/upload_images/2012934-2964c9a355cbd06d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image 1.png"></p><h2 id="1-2-source-map"><a href="#1-2-source-map" class="headerlink" title="1.2 source-map"></a>1.2 source-map</h2><p>在webpack打包源码时，我们会很难找到错误的出现位置，比如将源文件 sum.js、minus.js打包到bundle.js中，其中一个源文件出现了错误，仅仅会追踪到bundle.js中，这对我们来说并不理想。因此为了更加便捷的找到错误的原始位置，JavaScript为我们提供了 source-map的功能，将编译后的代码映射回原始源代码。如果一个错误来自于 sum.js，source map 就会明确的告诉你。  </p><p>我们来测试一下，在sum.js中输出一个错误：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES Mudule 规范</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'this is test'</span>) <span class="comment">// 输出错误</span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在没有devtool配置的情况下 npm run dev，会发现错误提示的行数并不准确，<br><img src="https://upload-images.jianshu.io/upload_images/2012934-694038175799b6a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image 2.png"></p><p>原因是我们的代码是被编译过的<br><img src="https://upload-images.jianshu.io/upload_images/2012934-d81ed03516a54a42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image 3.png"></p><p>然后在webpack.config.js中加入配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: <span class="string">'inline-source-map'</span>, <span class="comment">// 加入devtool配置</span></span><br></pre></td></tr></table></figure></p><p>当配置文件改动时需要重新执行 npm run dev：<br><img src="https://upload-images.jianshu.io/upload_images/2012934-432ed6eac8cb2797.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image 4.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-0b4cd3f4cf8a2015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image 5.png"></p><p>错误提示行数以及源码映射都是正确的。devtool的取值有很多，大家可根据需要自行配置<br><img src="https://upload-images.jianshu.io/upload_images/2012934-66866fa91860766f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image 6.png"></p><h2 id="1-3-模块热替换"><a href="#1-3-模块热替换" class="headerlink" title="1.3 模块热替换"></a>1.3 模块热替换</h2><blockquote><p>模块热替换(Hot Module Replacement)是 webpack 提供的最有用的功能之一。它允许在运行时更新各种模块，而无需进行完全刷新。</p></blockquote><p>使用非常简单，在webpack.config.js中引入webpack:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br></pre></td></tr></table></figure></p><p>在plugins数组中添加：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure></p><p>给devServer中的hot属性设为true：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    port: <span class="number">8080</span>,  <span class="comment">// 端口号</span></span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 主机名，设为该值可通过IP访问</span></span><br><span class="line">    overlay: &#123;</span><br><span class="line">      errors: <span class="literal">true</span> <span class="comment">// 错误提示</span></span><br><span class="line">    &#125;,</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们修改代码的时候就可以局部刷新模块而不是刷新整个页面了。</p><h1 id="2-构建生产环境"><a href="#2-构建生产环境" class="headerlink" title="2.构建生产环境"></a>2.构建生产环境</h1><blockquote><p>开发环境(development)和生产环境(production)的构建目标差异很大。在开发环境中，我们需要具有强大的、具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。而在生产环境中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写彼此独立的 webpack 配置。</p></blockquote><blockquote><p>虽然，以上我们将生产环境和开发环境做了略微区分，但是，请注意，我们还是会遵循不重复原则(Don’t repeat yourself - DRY)，保留一个“通用”配置。为了将这些配置合并在一起，我们将使用一个名为 webpack-merge 的工具。通过“通用”配置，我们不必在环境特定的配置中重复代码。</p></blockquote><p>我们先从安装 webpack-merge 开始，用来合并webpack配置项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-merge</span><br></pre></td></tr></table></figure></p><p>在config文件夹下创建 webpack.dev.js 和 webpack.build.js 并修改 webpack.config.js，将开发与生产环境的公共配置放在webpack.config.js中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: path.join(__dirname, <span class="string">'../src/main.js'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'../dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(vue|js|jsx)$/</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        enforce: <span class="string">'pre'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: createVueLoaderOptions(isDev)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ejs$/</span>,</span><br><span class="line">        use: [<span class="string">'ejs-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          isDev ? <span class="string">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span>, <span class="attr">options</span>: &#123; <span class="attr">importLoaders</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">          <span class="string">'postcss-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          isDev ? <span class="string">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(jpg|jpeg|png|gif|svg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">'[path][name]-[hash:5].[ext]'</span>,</span><br><span class="line">              limit: <span class="number">1024</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.join(__dirname, <span class="string">'../index.html'</span>),</span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure></p><p><strong>webpack.dev.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      index: <span class="string">'/index.html'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>webpack.build.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'initial'</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">'.'</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        commons: &#123;</span><br><span class="line">          name: <span class="string">'commons'</span>,</span><br><span class="line">          chunks: <span class="string">'initial'</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">      name: <span class="function"><span class="params">entrypoint</span> =&gt;</span> <span class="string">`manifest.<span class="subst">$&#123;entrypoint.name&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].css'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(</span><br><span class="line">      [<span class="string">'dist'</span>],</span><br><span class="line">      &#123;</span><br><span class="line">        root: path.join(__dirname, <span class="string">'../'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>修改package.json的命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"dev": "cross-env NODE_ENV=development webpack-dev-server --config config/webpack.dev.js",</span><br><span class="line">"build": "cross-env NODE_ENV=production webpack --config config/webpack.build.js --progress --inline --colors"</span><br></pre></td></tr></table></figure></p><p>现在分别执行 npm run dev 和 npm run build 就会得到你想要的了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-构建开发环境&quot;&gt;&lt;a href=&quot;#1-构建开发环境&quot; class=&quot;headerlink&quot; title=&quot;1. 构建开发环境&quot;&gt;&lt;/a&gt;1. 构建开发环境&lt;/h1&gt;&lt;p&gt;如果你一直跟随我前面的博文，那么你对webpack的基础知识已经有比较深刻的理解了。之前
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
      <category term="webpack" scheme="http://aventador.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（八）：使用Eslint审查代码</title>
    <link href="http://aventador.top/posts/46ef4800.html"/>
    <id>http://aventador.top/posts/46ef4800.html</id>
    <published>2019-02-02T13:25:18.000Z</published>
    <updated>2019-02-03T09:46:31.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>本章内容，我们在项目中加入eslint配置，来审查校验代码，这样能够避免一些比较低级的错误。并且在团队协作的时候，保持同一种风格和规范能提高代码的可读性，进而提高我们的工作效率。</p><h1 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h1><p>eslint-config-standard 是一种较为成熟通用的代码审查规则，这样就不用我们自己去定义规则了，使用起来非常方便，记住还需要安装一些依赖插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint eslint-config-standard eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node</span><br></pre></td></tr></table></figure></p><h1 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h1><p>在项目根目录下创建 <strong>.eslintrc</strong> 文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"no-new"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在vue项目中，<strong>.vue</strong>文件中的 <strong>script</strong>标签内的代码，eslint 是无法识别的，这时就需要使用插件： eslint-plugin-html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-plugin-html -D</span><br></pre></td></tr></table></figure></p><p>然后在 <strong>.eslintrc</strong> 中配置该插件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"html"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"no-new"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就能解析 <strong>.vue</strong>文件中的JS代码了，官方也是如此推荐。</p><h1 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h1><p>配置完成，如何使用呢？<br>在 package.json 文件中添加一条 script：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "build": "cross-env NODE_ENV=production webpack --config config/webpack.config.js --progress --inline --colors",</span><br><span class="line">    "lint": "eslint --ext .js --ext .vue src/"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>  <strong>- -ext</strong> 代表需要解析的文件格式，最后接上文件路径，由于我们的主要代码都在src 目录下，这里就配置 src 文件夹。<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></table></figure></p><p>  可见控制台给出了很多错误：<br>  <img src="http://upload-images.jianshu.io/upload_images/2012934-05a52d6709117b78?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在这里插入图片描述"><br>  在项目前期没有加入eslint的情况下，后期加入必然会审查出许多错误。出现这么多错误之后，如果我们逐条手动去解决会非常耗时，此时可以借助eslint自动修复，方法也很简单。<br>  只需要添加一条命令即可：<br>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "cross-env NODE_ENV=production webpack --config config/webpack.config.js --progress --inline --colors",</span><br><span class="line">  "lint": "eslint --ext .js --ext .vue src/",</span><br><span class="line">  "lint-fix": "eslint --fix --ext .js --ext .jsx --ext .vue src/"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  然后执行<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint-fix</span><br></pre></td></tr></table></figure></p><p>我们希望在开发过程中能够实时进行eslint代码审查，需要安装两个依赖：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-loader babel-eslint -D</span><br></pre></td></tr></table></figure></p><p>修改 <strong>.eslintrc</strong>：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"html"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"no-new"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"parserOptions"</span>:&#123;</span><br><span class="line">    <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于我们的项目使用了webpack并且代码都是经过Babel编译的，但是Babel处理过的代码有些语法可能对于eslint支持性不好，所以需要指定一个 parser。<br>下一步，在webpack.config.js中添加loader：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.(vue|js)$/</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        enforce: <span class="string">'pre'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p> enforce: ‘pre’ 表示预处理，因为我们只是希望eslint来审查我们的代码，并不是去改变它，在真正的loader(比如：vue-loader)发挥作用前用eslint去检查代码。</p><pre><code>记得在你的IDE中安装并开启eslint插件功能，这样就会有错误提示了。</code></pre><p>  比如：<br>  <img src="http://upload-images.jianshu.io/upload_images/2012934-93cc5dd4ad5828cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在这里插入图片描述"><br>  图中的错误是未使用的变量。</p><h1 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig:"></a>editorconfig:</h1><p>   editorconfig是用来规范我们的IDE配置的，在根目录创建 <strong>.editorconfig</strong>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure></p><p>这样就能在各种IDE使用相同的配置了。</p><pre><code>同样需要在IDE中安装editorconfig插件</code></pre><p>以上就是eslint的配置方法了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;本章内容，我们在项目中加入eslint配置，来审查校验代码，这样能够避免一些比较低级的错误。并且在团队协作的时候，保持同一种风格和规
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
      <category term="webpack" scheme="http://aventador.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（七）：使用 babel-loader</title>
    <link href="http://aventador.top/posts/78d52b07.html"/>
    <id>http://aventador.top/posts/78d52b07.html</id>
    <published>2019-02-02T13:24:32.000Z</published>
    <updated>2019-02-03T09:46:31.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是Babel"><a href="#1-什么是Babel" class="headerlink" title="1. 什么是Babel"></a>1. 什么是Babel</h1><p>如今 ES6 语法在开发中已经非常普及，甚至也有许多开发人员用上了 ES7 或 ES8 语法。然而，浏览器对这些高级语法的支持性并不是非常好。因此为了让我们的新语法能在浏览器中都能顺利运行，Babel 应运而生。<br>Babel是一个JavaScript编译器，能够让我们放心的使用新一代JS语法。比如我们的箭头函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; <span class="built_in">console</span>.log(<span class="string">'hello babel'</span>)</span><br></pre></td></tr></table></figure></p><p>经过Babel编译之后：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'hello babel'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>会编译成浏览器可识别的ES5语法。</p><h1 id="2-在webpack中使用babel-loader"><a href="#2-在webpack中使用babel-loader" class="headerlink" title="2. 在webpack中使用babel-loader"></a>2. 在webpack中使用babel-loader</h1><p>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D babel-loader @babel/core @babel/preset-env webpack</span><br></pre></td></tr></table></figure></p><p>修改 webpack.config.js，加入新的loader：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>遇到JS文件就先用babel-loader处理，exclude表示排除 node_modules 文件夹中的文件。loader的配置就OK了，可是这样还不能发挥Babel的作用。在项目根目录下创建一个 .babelrc 文件，添加代码：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"@babel/preset-env"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们还希望能够在项目对一些组件进行懒加载，所以还需要一个Babel插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-syntax-dynamic-import -D</span><br></pre></td></tr></table></figure></p><p>在 .babelrc 文件中加入plugins配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"@babel/preset-env"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"syntax-dynamic-import"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在src 目录下创建 helper.js：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is helper'</span>)</span><br></pre></td></tr></table></figure></p><p>再来修改我们的 main.js ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br><span class="line"><span class="keyword">import</span> Modal <span class="keyword">from</span> <span class="string">'./components/modal/modal'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/style/common.less'</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  div.setAttribute(<span class="string">'id'</span>, <span class="string">'app'</span>)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line">  <span class="keyword">let</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">  <span class="keyword">let</span> modal = <span class="keyword">new</span> Modal()</span><br><span class="line">  dom.innerHTML = modal.template(&#123;</span><br><span class="line">    title: <span class="string">'标题'</span>,</span><br><span class="line">    content: <span class="string">'内容'</span>,</span><br><span class="line">    footer: <span class="string">'底部'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line">  button.innerText = <span class="string">'click me'</span></span><br><span class="line">  button.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> help = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./helper'</span>)</span><br><span class="line">    help()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(button)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> App()</span><br><span class="line"><span class="built_in">console</span>.log(_.camelCase(<span class="string">'Foo Bar'</span>))</span><br></pre></td></tr></table></figure></p><p>当button点击时，加载 helper 然后调用。打包之后可见：<br><img src="http://upload-images.jianshu.io/upload_images/2012934-f737bd10225bc684?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在这里插入图片描述"><br>多了一个 3.bundle.js，在浏览器打开 dist/index.html ，打开 network查看，3.bundle.js并未加载：<br><img src="http://upload-images.jianshu.io/upload_images/2012934-27a396aa4f6c7597.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在这里插入图片描述"><br>当点击button之后，发现浏览器请求了3.bundle.js，控制台也打印出了数据。<br><img src="http://upload-images.jianshu.io/upload_images/2012934-729e9ff02dba24c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在这里插入图片描述"><br><img src="http://upload-images.jianshu.io/upload_images/2012934-aa9a359aa1e18ee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在这里插入图片描述"></p><blockquote><p>由于 Babel 只转换语法(如箭头函数)， 你可以使用 babel-polyfill 支持新的全局变量，例如 Promise 、新的原生方法如 String.padStart (left-pad) 等。</p></blockquote><p>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-polyfill</span><br></pre></td></tr></table></figure></p><p>在入口文件引入就可以了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-什么是Babel&quot;&gt;&lt;a href=&quot;#1-什么是Babel&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Babel&quot;&gt;&lt;/a&gt;1. 什么是Babel&lt;/h1&gt;&lt;p&gt;如今 ES6 语法在开发中已经非常普及，甚至也有许多开发人员用上了 ES
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
      <category term="webpack" scheme="http://aventador.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（六）：使用SplitChunksPlugin分割代码</title>
    <link href="http://aventador.top/posts/2040befe.html"/>
    <id>http://aventador.top/posts/2040befe.html</id>
    <published>2019-02-02T13:23:50.000Z</published>
    <updated>2019-02-03T09:46:31.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SplitChunksPlugin的概念"><a href="#1-SplitChunksPlugin的概念" class="headerlink" title="1. SplitChunksPlugin的概念"></a>1. SplitChunksPlugin的概念</h1><p>起初，chunks(代码块)和导入他们中的模块通过webpack内部的父子关系图连接.在webpack3中，通过CommonsChunkPlugin来避免他们之间的依赖重复。而在webpack4中CommonsChunkPlugin被移除，取而代之的是 optimization.splitChunks 和 optimization.runtimeChunk 配置项，下面展示它们将如何工作。</p><p>在默认情况下，SplitChunksPlugin 仅仅影响按需加载的代码块，因为更改初始块会影响HTML文件应包含的脚本标记以运行项目。</p><p>webpack将根据以下条件自动拆分代码块：</p><ul><li>会被共享的代码块或者 node_mudules 文件夹中的代码块</li><li>体积大于30KB的代码块（在gz压缩前）</li><li>按需加载代码块时的并行请求数量不超过5个</li><li>加载初始页面时的并行请求数量不超过3个</li></ul><h3 id="举例1："><a href="#举例1：" class="headerlink" title="举例1："></a>举例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line"></span><br><span class="line">// 动态加载 a.js</span><br><span class="line">import(&apos;./a&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-8808e64f84a39ee5.gif?imageMogr2/auto-orient/strip" alt=""> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// a.js</span><br><span class="line">import &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-4fb4de61f122b3cf.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>打包之后的结果会创建一个包含 vue 的独立代码块，当包含 a.js 的原始代码块被调用时，这个独立代码块会并行请求进来。</p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><ul><li>vue 来自 node_modules 文件夹</li><li>vue 体积超过30KB</li><li>导入调用时的并行请求数为2</li><li>不影响页面初始加载</li></ul><p>我们这样做的原因是因为，vue代码并不像你的业务代码那样经常变动，把它单独提取出来就可以和你的业务代码分开缓存，极大的提高效率。</p><h3 id="举例2："><a href="#举例2：" class="headerlink" title="举例2："></a>举例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// entry.js</span><br><span class="line"></span><br><span class="line">import(&quot;./a&quot;);</span><br><span class="line">import(&quot;./b&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-23e12a1a84d393ae.gif?imageMogr2/auto-orient/strip" alt=""> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// a.js</span><br><span class="line">import &quot;./helpers&quot;; // helpers is 40kb in size</span><br><span class="line"></span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-37133ab159ec6a52.gif?imageMogr2/auto-orient/strip" alt=""> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// b.js</span><br><span class="line">import &quot;./helpers&quot;;</span><br><span class="line">import &quot;./more-helpers&quot;; // more-helpers is also 40kb in size</span><br><span class="line"></span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-ca1e61c7a7a3d597.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>结果：将创建一个单独的块，其中包含<code>./helpers</code>它的所有依赖项。在导入调用时，此块与原始块并行加载。</p><h3 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h3><ul><li>条件1：<code>helpers</code> 是共享块</li><li>条件2：<code>helpers</code>大于30kb</li><li>条件3：导入调用的并行请求数为2</li><li>条件4：不影响初始页面加载时的请求</li></ul><h1 id="2-SplitChunksPlugin的默认配置"><a href="#2-SplitChunksPlugin的默认配置" class="headerlink" title="2. SplitChunksPlugin的默认配置"></a>2. SplitChunksPlugin的默认配置</h1><p>以下是SplitChunksPlugin的默认配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">    chunks: &quot;async&quot;,</span><br><span class="line">    minSize: 30000, // 模块的最小体积</span><br><span class="line">    minChunks: 1, // 模块的最小被引用次数</span><br><span class="line">    maxAsyncRequests: 5, // 按需加载的最大并行请求数</span><br><span class="line">    maxInitialRequests: 3, // 一个入口最大并行请求数</span><br><span class="line">    automaticNameDelimiter: &apos;~&apos;, // 文件名的连接符</span><br><span class="line">    name: true,</span><br><span class="line">    cacheGroups: &#123; // 缓存组</span><br><span class="line">        vendors: &#123;</span><br><span class="line">            test: /[\\/]node_modules[\\/]/,</span><br><span class="line">            priority: -10</span><br><span class="line">        &#125;,</span><br><span class="line">        default: &#123;</span><br><span class="line">            minChunks: 2,</span><br><span class="line">            priority: -20,</span><br><span class="line">            reuseExistingChunk: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-5a4d9935fd12898e.gif?imageMogr2/auto-orient/strip" alt=""> </p><h3 id="缓存组："><a href="#缓存组：" class="headerlink" title="缓存组："></a>缓存组：</h3><p>缓存组因该是SplitChunksPlugin中最有趣的功能了。在默认设置中，会将 node_mudules 文件夹中的模块打包进一个叫 vendors的bundle中，所有引用超过两次的模块分配到  default bundle 中。更可以通过 priority 来设置优先级。</p><h2 id="chunks："><a href="#chunks：" class="headerlink" title="chunks："></a>chunks：</h2><p>chunks属性用来选择分割哪些代码块，可选值有：’all’（所有代码块），’async’（按需加载的代码块），’initial’（初始化代码块）。</p><h1 id="3-在项目中添加SplitChunksPlugin"><a href="#3-在项目中添加SplitChunksPlugin" class="headerlink" title="3. 在项目中添加SplitChunksPlugin"></a>3. 在项目中添加SplitChunksPlugin</h1><p>为了方便演示，我们先安装两个类库： lodash 和 axios，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i lodash axios -S</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-2a5a32389d0e0e2b.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>修改 main.js，引入 lodash 和axios 并调用相应方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import Modal from &apos;./components/modal/modal&apos;</span><br><span class="line">import &apos;./assets/style/common.less&apos;</span><br><span class="line">import _ from &apos;lodash&apos;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">const App = function () &#123;</span><br><span class="line">  let div = document.createElement(&apos;div&apos;)</span><br><span class="line">  div.setAttribute(&apos;id&apos;, &apos;app&apos;)</span><br><span class="line">  document.body.appendChild(div)</span><br><span class="line">  let dom = document.getElementById(&apos;app&apos;)</span><br><span class="line">  let modal = new Modal()</span><br><span class="line">  dom.innerHTML = modal.template(&#123;</span><br><span class="line">    title: &apos;标题&apos;,</span><br><span class="line">    content: &apos;内容&apos;,</span><br><span class="line">    footer: &apos;底部&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const app = new App()</span><br><span class="line">console.log(_.camelCase(&apos;Foo Bar&apos;))</span><br><span class="line">axios.get(&apos;aaa&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-acfb0a0b0988cd5f.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>使用SplitChunksPlugin不需要安装任何依赖，只需在 webpack.config.js 中的 config对象添加 optimization 属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: &apos;initial&apos;,</span><br><span class="line">      automaticNameDelimiter: &apos;.&apos;,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: /[\\/]node_modules[\\/]/,</span><br><span class="line">          priority: 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">      name: entrypoint =&gt; `manifest.$&#123;entrypoint.name&#125;`</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-52df2c73e0191da3.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>配置 runtimeChunk 会给每个入口添加一个只包含runtime的额外的代码块，name 的值也可以是字符串，不过这样就会给每个入口添加相同的 runtime，配置为函数时，返回当前的entry对象，即可分入口设置不同的runtime。</p><p>我们再安装一个 webpack-bundle-analyzer，这个插件会清晰的展示出打包后的各个bundle所依赖的模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-a4ce0e6e0d19ac55.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-bb4464bc01afbff2.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>使用，在plugins数组中添加即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new BundleAnalyzerPlugin()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-07afb9dd3b7c032b.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>打包之后：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-29eae4f2907bde24?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-0b434d1bf40b2599.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-2b0b82dd7a88552b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-a80e97e65e4cc9c8.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>各个模块依赖清晰可见，打开 dist/index.html可见我们的代码顺利运行：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-f1c9374d31f4449c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-f4a2b3ea23e6c435.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>以上就是SplitChunksPlugin的基本用法，更多高级的配置大家可以继续钻研（比如多入口应用）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-SplitChunksPlugin的概念&quot;&gt;&lt;a href=&quot;#1-SplitChunksPlugin的概念&quot; class=&quot;headerlink&quot; title=&quot;1. SplitChunksPlugin的概念&quot;&gt;&lt;/a&gt;1. SplitChunksPlugi
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
      <category term="webpack" scheme="http://aventador.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（五）：处理项目中的资源文件（二）</title>
    <link href="http://aventador.top/posts/ff9651be.html"/>
    <id>http://aventador.top/posts/ff9651be.html</id>
    <published>2019-02-02T13:23:03.000Z</published>
    <updated>2019-02-03T08:10:14.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-在项目中使用-less"><a href="#1-在项目中使用-less" class="headerlink" title="1. 在项目中使用 less"></a>1. 在项目中使用 less</h1><p>在 src/assets/ 下新建 common.less ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">  background: #fafafa;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-9020ad076d645408.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>在 main.js 中引入 common.less ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./assets/style/common.less&apos;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-07a809ec681f5cb9.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>安装 less-loader：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader -D</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-0d4314118bfca19e.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>添加 rules：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   test: /\.less$/,</span><br><span class="line">   use: [</span><br><span class="line">     &apos;style-loader&apos;,</span><br><span class="line">     &apos;css-loader&apos;,</span><br><span class="line">     &apos;less-loader&apos;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-d88bf39ae95cfa8b.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>打包之后，在浏览器打开 dist/index.html，less文件中的样式已经通过 style 标签载入了：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-194b94439848478d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-e768c5d87d3c8956.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><h1 id="2-使用MiniCssExtractPlugin"><a href="#2-使用MiniCssExtractPlugin" class="headerlink" title="2. 使用MiniCssExtractPlugin"></a>2. 使用MiniCssExtractPlugin</h1><p>我们之前的样式代码都是通过 style 标签载入的，那么如何通过 link 引入CSS文件的方式实现呢？</p><p>这就需要使用一个插件，在webpack3中通常使用ExtractTextWebpackPlugin，但是在webpack4中已经不再支持ExtractTextWebpackPlugin的正式版，而测试版本又不够稳定，因此我们使用MiniCssExtractPlugin替代。首先安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-e9104b2ec3972890.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>在webpack.config.js 中引入并添加 plugins ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-ed26cea1f923a356.gif?imageMogr2/auto-orient/strip" alt=""> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &quot;[name].css&quot;</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-47f6a946b4f69719.gif?imageMogr2/auto-orient/strip" alt=""> </p><p> 修改 CSS 和 less 的 rules：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: /.css$/,</span><br><span class="line">        use: [</span><br><span class="line">          // &apos;style-loader&apos;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader</span><br><span class="line">          &#125;,</span><br><span class="line">          &apos;css-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.less$/,</span><br><span class="line">        use: [</span><br><span class="line">          // &apos;style-loader&apos;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader</span><br><span class="line">          &#125;,</span><br><span class="line">          &apos;css-loader&apos;,</span><br><span class="line">          &apos;less-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-c7668816d7cd9001.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>npm run build 之后，可见head中引入了一个 main.css 文件：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-ed039ee7ee623a49.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-a3b25b2ed841fce2.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>也正是我们在 common.less 和 modal.css 中的代码</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-42b68e2aabc38723?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-48284d76011eaa5c.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><h1 id="3-postcss-loader"><a href="#3-postcss-loader" class="headerlink" title="3. postcss-loader"></a>3. postcss-loader</h1><p>postcss-loader 可以帮助我们处理CSS，如自动添加浏览器前缀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-loader autoprefixer</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-07342baa1a4454e3.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>在根目录下创建 postcss.config.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const autoprefixer = require(&apos;autoprefixer&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [&apos;last 5 version&apos;]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-ee6337518867253b.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>修改 css 和 less 的 rules：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use: [</span><br><span class="line">          // &apos;style-loader&apos;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; loader: &apos;css-loader&apos;, options: &#123; importLoaders: 1 &#125; &#125;,</span><br><span class="line">          &apos;postcss-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [</span><br><span class="line">          // &apos;style-loader&apos;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader</span><br><span class="line">          &#125;,</span><br><span class="line">          &apos;css-loader&apos;,</span><br><span class="line">          &apos;postcss-loader&apos;,</span><br><span class="line">          &apos;less-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-e469db73dc41d618.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>在 modal.css中加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.flex&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-afb154591decd67b.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>打包之后打开 main.css，可见浏览器前缀已经加上了：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-041d73e7df49eb94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-d9572fa1ae4660f1.gif?imageMogr2/auto-orient/strip" alt=""> ​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-在项目中使用-less&quot;&gt;&lt;a href=&quot;#1-在项目中使用-less&quot; class=&quot;headerlink&quot; title=&quot;1. 在项目中使用 less&quot;&gt;&lt;/a&gt;1. 在项目中使用 less&lt;/h1&gt;&lt;p&gt;在 src/assets/ 下新建 common
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（四）：处理项目中的资源文件（一）</title>
    <link href="http://aventador.top/posts/35a01c57.html"/>
    <id>http://aventador.top/posts/35a01c57.html</id>
    <published>2019-02-02T13:22:17.000Z</published>
    <updated>2019-02-03T09:46:31.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Loader的使用"><a href="#1-Loader的使用" class="headerlink" title="1. Loader的使用"></a>1. Loader的使用</h1><p><a href="https://blog.csdn.net/qq_38286992/article/details/85338683" target="_blank" rel="noopener">之前的博文</a>已经介绍了Loader的概念以及用法，webpack 可以使用 loader 来预处理文件，这允许你打包除 JavaScript 之外的任何静态资源， 甚至允许你直接在 JavaScript 模块中 import CSS文件。</p><p>在 src 目录下新建 components 文件夹，新建 modal 组件：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-519e7c14df6655c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-5b27f3099c13faa6.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>编写代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--modal.ejs--&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;modal-parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">        &lt;h3 class=&quot;modal-title&quot;&gt;&lt;%= title %&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">        &lt;%= content %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">        &lt;%= footer %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-21882e8c39fcfc4d.gif?imageMogr2/auto-orient/strip" alt=""> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// modal.js</span><br><span class="line">import template from &apos;./modal.ejs&apos;</span><br><span class="line"></span><br><span class="line">export default function modal () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name: &apos;modal&apos;,</span><br><span class="line">    template: template</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-7deee7ae59236b4b.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>修改 main.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Modal from &apos;./components/modal/modal&apos;</span><br><span class="line"></span><br><span class="line">const App = function () &#123;</span><br><span class="line">  let div = document.createElement(&apos;div&apos;)</span><br><span class="line">  div.setAttribute(&apos;id&apos;, &apos;app&apos;)</span><br><span class="line">  document.body.appendChild(div)</span><br><span class="line">  let dom = document.getElementById(&apos;app&apos;)</span><br><span class="line">  let modal = new Modal()</span><br><span class="line">  dom.innerHTML = modal.template(&#123;</span><br><span class="line">    title: &apos;标题&apos;,</span><br><span class="line">    content: &apos;内容&apos;,</span><br><span class="line">    footer: &apos;底部&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const app = new App()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-c765f0ad8ffd4ec2.gif?imageMogr2/auto-orient/strip" alt=""> </p><p> 此时执行 npm run build 会报错 ：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-59e57465f2c46875?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-f677b69e94d53924.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>webpack 无法解析 .ejs 文件，因此我们需要安装对应的 loader：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i ejs-loader -D</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-6dbbd4c3aea8867a.gif?imageMogr2/auto-orient/strip" alt=""> </p><p> 并修改 webpack.config.js 添加 module 属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.ejs$/,</span><br><span class="line">        use: [&apos;ejs-loader&apos;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-aa746c996285e14c.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>再次执行 npm run build 就不会报错了，打开 dist/index.html ：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-567926279c5baea4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-45a3491ae667b44c.gif?imageMogr2/auto-orient/strip" alt=""> ​<img src="http://upload-images.jianshu.io/upload_images/2012934-827ba9621c46439f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-472481b12e4a4d5a.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>可以看到我们的 modal 组件已经成功渲染出来了。 </p><h1 id="2-处理项目中的CSS文件"><a href="#2-处理项目中的CSS文件" class="headerlink" title="2. 处理项目中的CSS文件"></a>2. 处理项目中的CSS文件</h1><p>在 modal.css 中加入样式代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.modal-parent&#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: auto;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.modal-title&#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">.modal-body&#123;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-left: 0;</span><br><span class="line">    border-right: 0;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.modal-footer&#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-5c7fa85be717e91e.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>安装 css-loader 和 style-loader：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-e69ae0adafcad013.gif?imageMogr2/auto-orient/strip" alt=""> </p><p> 修改webpack.config.js 中的 module.rules ，添加css-loader 和 style-loader：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.ejs$/,</span><br><span class="line">        use: [&apos;ejs-loader&apos;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.css$/,</span><br><span class="line">        use: [</span><br><span class="line">          &apos;style-loader&apos;,</span><br><span class="line">          &apos;css-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-fcc1037cd471ec32.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>在 modal.js 中引入 modal.css：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./modal.css&apos;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-2b409dc4be0e787d.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>再次执行 npm run build ，打开 dist/index.html：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-b76254f3310ea349?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-6c04f88bc3146574.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>CSS样式已经通过 style 标签添加到页面上了；</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-789f0b03d296061d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-bf866058d3ee356b.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><h2 id="3-处理项目中的图片"><a href="#3-处理项目中的图片" class="headerlink" title="3. 处理项目中的图片"></a>3. 处理项目中的图片</h2><p>在src目录下创建 assets/img ，放入两张图片</p><p> <img src="http://upload-images.jianshu.io/upload_images/2012934-138ce04ee955bb05.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-5f91b28d679beb14.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>给 modal 添加一个背景图的样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.modal-body&#123;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-left: 0;</span><br><span class="line">    border-right: 0;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    background: url(&quot;../../assets/img/bg.jpg&quot;);</span><br><span class="line">    color: #fff;</span><br><span class="line">    height: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-4712455d71166e5e.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>由于webpack无法处理图片资源，所以也要安装对应的 loader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader file-loader</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-33f68e843f1db39c.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>在 webpack.config.js 中添加 loader </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.ejs$/,</span><br><span class="line">        use: [&apos;ejs-loader&apos;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.css$/,</span><br><span class="line">        use: [</span><br><span class="line">          &apos;style-loader&apos;,</span><br><span class="line">          &apos;css-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /.(jpg|jpeg|png|gif|svg)$/,</span><br><span class="line">        use: &apos;url-loader&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-33abaf8a87b28916.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>打包代码之后，在浏览器打开 dist/index.html ，可见图片已经显示出来了：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-15bd44cc1d30757a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-88c8c9782c1b9c3a.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>仔细查看这张图片可以发现，它是通过 DataURL 加载出来的：<img src="http://upload-images.jianshu.io/upload_images/2012934-ea792a00898e338c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-17c9cacd8903e199.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>下面更改 url-loader 的配置，limit表示在文件大小低于指定值时，返回一个DataURL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: /.(jpg|jpeg|png|gif|svg)$/,</span><br><span class="line">        use:  [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &apos;url-loader&apos;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: &apos;[name]-[hash:5].[ext]&apos;,</span><br><span class="line">              limit: 1024</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-d29b17c175109b22.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>再次打包后，图片会以文件形式展示出来：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-d11259cc4a15361f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-71c6bc549e8903ce.gif?imageMogr2/auto-orient/strip" alt=""> ​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Loader的使用&quot;&gt;&lt;a href=&quot;#1-Loader的使用&quot; class=&quot;headerlink&quot; title=&quot;1. Loader的使用&quot;&gt;&lt;/a&gt;1. Loader的使用&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/q
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
      <category term="webpack" scheme="http://aventador.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（三）：自动生成项目中的HTML文件</title>
    <link href="http://aventador.top/posts/6ead29be.html"/>
    <id>http://aventador.top/posts/6ead29be.html</id>
    <published>2019-02-02T13:20:44.000Z</published>
    <updated>2019-02-03T09:46:31.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-webpack中的CommonJS和ES-Mudule-规范"><a href="#1-webpack中的CommonJS和ES-Mudule-规范" class="headerlink" title="1. webpack中的CommonJS和ES Mudule 规范"></a>1. webpack中的CommonJS和ES Mudule 规范</h1><h2 id="1-1-CommonJs规范"><a href="#1-1-CommonJs规范" class="headerlink" title="1.1 CommonJs规范"></a>1.1 CommonJs规范</h2><p>CommonJs规范的出发点：JS没有模块系统、标准库较少、缺乏包管理工具；为了让JS可以在任何地方运行，以达到Java、PHP这些后台语言具备开发大型应用的能力。</p><p>在CommonJs规范中：</p><ul><li>一个文件就是一个模块，拥有单独的作用域；</li><li>普通方式定义的变量、函数、对象都属于该模块内；</li><li>通过require来加载模块；</li><li>通过exports和modul.exports来暴露模块中的内容；</li></ul><h2 id="1-2-ES-Mudule-规范"><a href="#1-2-ES-Mudule-规范" class="headerlink" title="1.2 ES Mudule 规范"></a>1.2 ES Mudule 规范</h2><p>ES6在语言标准的层面上，实现了模块功能，基本特点如下：</p><ul><li>每一个模块只加载一次， 每一个JS只执行一次， 如果下次再去加载同目录下同文件，直接从内存中读取；</li><li>每一个模块内声明的变量都是局部变量， 不会污染全局作用域；</li><li>模块内部的变量或者函数可以通过export导出；</li><li>一个模块可以导入别的模块；</li></ul><p>模块功能主要由两个命令构成：export和import；export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// esm.js</span><br><span class="line">let firstName = &apos;Jack&apos;;</span><br><span class="line">let lastName = &apos;Wang&apos;;</span><br><span class="line"></span><br><span class="line">export &#123;firstName, lastName&#125;</span><br><span class="line"></span><br><span class="line">// export命令除了输出变量，还可以输出函数</span><br><span class="line">export function (a, b) &#123;</span><br><span class="line">  return a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-7e8c6b23486d13a6.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块，import命令接受一对大括号，里面指定要从其他模块导入的变量名，大括号里面的变量名，必须与被导入模块对外接口的名称相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// main.js</span><br><span class="line">import &#123;firstName, lastName&#125; from &apos;./esm&apos;;</span><br><span class="line"></span><br><span class="line">function say() &#123;</span><br><span class="line">  console.log(&apos;Hello , &apos; + firstName + &apos; &apos; + lastName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-52c7796bbd37e56f.gif?imageMogr2/auto-orient/strip" alt=""> </p><h2 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h2><p>现在，在src目录下新建 sum.js 和 minus.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// sum.js ES Mudule 规范</span><br><span class="line">// export default命令，为模块指定默认输出</span><br><span class="line">export default function (a, b) &#123;</span><br><span class="line">  return a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-af483dbef298f5fd.gif?imageMogr2/auto-orient/strip" alt=""> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// minus.js commonJS 规范</span><br><span class="line"></span><br><span class="line">module.exports = function (a, b) &#123;</span><br><span class="line">  return a - b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-4af3c2e670cf4290.gif?imageMogr2/auto-orient/strip" alt=""> </p><p> 修改 main.js </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sum from &apos;./sum&apos;</span><br><span class="line">import minus from &apos;./minus&apos;</span><br><span class="line"></span><br><span class="line">console.log(&apos;sum(1, 2): &apos; + sum(1, 2))</span><br><span class="line">console.log(&apos;minus(5, 2): &apos; + minus(5, 2))</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-6dc4db91d2f8bf19.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>执行 npm run build 之后，打开 index.html，在控制台中可以看到输出的结果。</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-ea811a00ef59c294.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-8beaa5029e435a83.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><h1 id="2-自动生成项目中的HTML文件"><a href="#2-自动生成项目中的HTML文件" class="headerlink" title="2. 自动生成项目中的HTML文件"></a>2. 自动生成项目中的HTML文件</h1><p>在<a href="https://blog.csdn.net/qq_38286992/article/details/85538205" target="_blank" rel="noopener">前文</a>中我们为了演示打包好的 main.bundle.js ，在根目录下创建了一个 index.html ，并引入main.bundle.js。而在实际项目中，我们可以通过 webpack 的一个插件：<a href="https://www.webpackjs.com/plugins/html-webpack-plugin/" target="_blank" rel="noopener">HtmlWebpackPlugin</a> 来自动生成HTML文件并引入我们打包好的JS和CSS文件。</p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-1d9767cd9d4e3467.gif?imageMogr2/auto-orient/strip" alt=""> </p><p> 整理项目目录：</p><p>在根目录创建config文件夹，把webpack.config.js移入config，并修改webpack.config.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">  mode: &apos;none&apos;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: path.join(__dirname, &apos;../src/main.js&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;[name].bundle.js&apos;,</span><br><span class="line">    path: path.join(__dirname, &apos;../dist&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.join(__dirname, &apos;../index.html&apos;),</span><br><span class="line">      inject: true,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-05953bae234d8a19.gif?imageMogr2/auto-orient/strip" alt=""> </p><ul><li>template：模版文件的路径，这里使用根目录下的index.html文件；</li><li>inject：设为 true 表示把JS文件注入到body结尾，CSS文件注入到head中；</li><li>minify：removeComments: true 表示删除模版文件中的注释，minify还有很多配置可选请<a href="https://github.com/jantimon/html-webpack-plugin#minification" target="_blank" rel="noopener">自行参阅</a>；</li></ul><p>下一步注释掉index.html 中我们手动引入的 script ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;/&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;script src=&quot;dist/main.bundle.js&quot;&gt;&lt;/script&gt; --&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-a7b707b7dd77631a.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>执行 npm run build ，可以看到，dist 目录下多了一个 index.html，这就是通过 <a href="https://www.webpackjs.com/plugins/html-webpack-plugin/" target="_blank" rel="noopener">HtmlWebpackPlugin </a>生成的文件，打开dist/index.html，已经自动引入了 main.bundle.js并且注释已被删除。</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-85f88ef28d2e5c57?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-7a25248813e0df35.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>至此，我们已经成功实现自动生成项目中的HTML文件了。</p><h1 id="3-清理-dist文件夹"><a href="#3-清理-dist文件夹" class="headerlink" title="3. 清理/dist文件夹"></a>3. 清理/dist文件夹</h1><p>每次执行npm run build 打包时，都会有上次的代码遗留下来，导致我们的 <code>/dist</code> 文件夹相当杂乱。通常，在每次构建前清理 <code>/dist</code> 文件夹，是比较推荐的做法。</p><p><a href="https://www.npmjs.com/package/clean-webpack-plugin" target="_blank" rel="noopener"><code>clean-webpack-plugin</code></a> 是一个比较普及的管理插件，让我们安装和配置下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-d0e67d3b2b5f260d.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>在webpack.config.js 中使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-b34f9e9bca564aba.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>在 plugins 中加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new CleanWebpackPlugin([&apos;dist&apos;],&#123;root: path.join(__dirname, &apos;../&apos;)&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-2066640c0fbc2423.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>第一个参数表示文件夹路径数组；第二个参数是 options 配置项，root 为到webpack根文件夹的绝对路径，默认为 __dirname，由于dist文件夹和webpack.config.js不再相同目录下，因此我们需要重新定义 root 路径，以免无法找到 dist 文件夹。</p><p>执行 npm run build ，在命令行中可见：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-1768f1081a850626.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2012934-2044bf0d1b4ea8ec.gif?imageMogr2/auto-orient/strip" alt=""> ​</p><p>dist 文件夹已被删除了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-webpack中的CommonJS和ES-Mudule-规范&quot;&gt;&lt;a href=&quot;#1-webpack中的CommonJS和ES-Mudule-规范&quot; class=&quot;headerlink&quot; title=&quot;1. webpack中的CommonJS和ES Mudu
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
      <category term="webpack" scheme="http://aventador.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（二）：创建项目，打包第一个JS文件</title>
    <link href="http://aventador.top/posts/31e86db9.html"/>
    <id>http://aventador.top/posts/31e86db9.html</id>
    <published>2019-02-02T13:19:38.000Z</published>
    <updated>2019-02-03T09:46:31.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h1><h2 id="1-1-初始化一个项目"><a href="#1-1-初始化一个项目" class="headerlink" title="1.1 初始化一个项目"></a>1.1 初始化一个项目</h2><p>首先安装nodejs，打开 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodeJs官网</a> 直接下载安装即可，安装完毕后打开命令行工具，进入你的项目文件夹，执行</p><p>npm init 进行项目的初始化：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-731bdbebf2b3af20?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>过程中会让你填写项目名、版本、描述、仓库地址、关键字等信息，可以不填一路回车，执行完毕后会在根目录下创建一个 package.json 文件，这样就初始化结束了。</p><h2 id="1-2-安装webpack"><a href="#1-2-安装webpack" class="headerlink" title="1.2 安装webpack"></a>1.2 安装webpack</h2><p>由于在webpack4中已经不再默认安装 webpacl-cli，所以我们要手动安装，在命令行执行 npm i webpack webpack-cli -D 即可。对于大多数项目，建议本地安装。这可以使我们在引入破坏式变更(breaking change)的依赖时，更容易分别升级项目。</p><h1 id="2-打包第一个JS文件"><a href="#2-打包第一个JS文件" class="headerlink" title="2. 打包第一个JS文件"></a>2. 打包第一个JS文件</h1><p>首先，我们在根目录下创建一个 webpack.config.js 文件和一个src文件夹。然后在src中创建一个 main.js 文件，如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-9f53d80a28b4009f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在 main.js 中写一行 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-2735c29e440e6834.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>然后打开 webpack.config.js ，进行webpack的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: path.join(__dirname, <span class="string">'./src/main.js'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-0fd3a489b31c07da.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>我们设置了一个名为 main 的入口，并以 src 下的 main.js 作为入口文件，然后输出到根目录下的 dist 文件夹中。</p><blockquote><p>在webpack4中，我们需要设置 mode 属性，用来决定当前是development还是production环境，webpack会根据此值来进行一些默认操作，两种环境的不同配置后面的博文会详解，这里我们设置为 ‘none’ ，来避免默认操作。前文已经说过，path 是 nodeJs中的核心模块用来操作路径，__dirname 表示文件的当前路径（此时为根路径）。而 output中的filename属性，[name] 表示入口的名称，此处就是 main。</p></blockquote><p>接下来打开 package.json 文件，来编写一条命令执行webpack的打包。在 script 中添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.js --progress --colors"</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2012934-2dc5f57ea93dde5b.gif?imageMogr2/auto-orient/strip" alt=""> </p><p>webpack –config path/to/your/file/file.js 表示执行某个配置文件，–progress可以让我们看到打包的进度 ， –colors 开启命令行颜色显示，更多的webpack命令参数大家可以另行查阅。</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-12ab16fb570d42f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后就可以在命令行执行：npm run build，执行完毕后，我们可以看到，在根目录下多了一个 dist 文件夹 并有一个 main.bundle.js文件，这就是webpack为我们打包出来的静态资源，而文件路径就是我们在 output 中设置的值。</p><p>为了演示打包好的 main.bundle.js ，我们在根目录下创建一个 index.html ，并引入main.bundle.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/main.bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中打开 index.html，可见main.js中的代码已经被执行了：</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-6d606afa4a6ea576?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在IDE中打开main.bundle.js，代码的最底部可以看到我们在main.js中写的代码。</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-0f1c4b5fa1da29e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>至此，我们的第一次 webpack 打包就成功了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-创建项目&quot;&gt;&lt;a href=&quot;#1-创建项目&quot; class=&quot;headerlink&quot; title=&quot;1. 创建项目&quot;&gt;&lt;/a&gt;1. 创建项目&lt;/h1&gt;&lt;h2 id=&quot;1-1-初始化一个项目&quot;&gt;&lt;a href=&quot;#1-1-初始化一个项目&quot; class=&quot;head
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
      <category term="webpack" scheme="http://aventador.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack4系列教程（一）：初识webpack</title>
    <link href="http://aventador.top/posts/c982193d.html"/>
    <id>http://aventador.top/posts/c982193d.html</id>
    <published>2019-02-02T13:12:55.000Z</published>
    <updated>2019-02-03T09:44:09.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是webpack"><a href="#1-什么是webpack" class="headerlink" title="1. 什么是webpack"></a>1. 什么是webpack</h1><p>先来看看<a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">官网</a>对webpack的介绍 ：</p><blockquote><p>本质上，<em>webpack</em>是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个<em>bundle</em>。</p></blockquote><p>简单来说webpack就是一个JavaScript的打包器，将各种模块（module）打包成资源文件；还可以通过 Code Spliting 来把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件；webpack 可以使用 loader 来预处理文件，这允许你打包除了JavaScript 之外的任何静态资源。</p><p><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">官网</a>首页很清晰的展示了webpack的主要功能：</p><p>​</p><p><img src="http://upload-images.jianshu.io/upload_images/2012934-6beaaa872608b868?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>我们可以看到，一堆 modules 经过 webpack 打包处理成了各种静态资源。这就是 webpack</p><h1 id="2-webpack核心概念"><a href="#2-webpack核心概念" class="headerlink" title="2. webpack核心概念"></a>2. webpack核心概念</h1><p>在开始学习 webpack 之前，你需要了解 webpack 的四个核心概念： </p><ul><li>入口（entry）</li><li>出口（output）</li><li>loader</li><li>插件（plugins） </li></ul><h2 id="2-1-入口（entry）"><a href="#2-1-入口（entry）" class="headerlink" title="2.1 入口（entry）"></a>2.1 入口（entry）</h2><p>入口指示 webpack 应该使用哪个模块，来开始构建其内部依赖。进入入口后，webpack 会找出有哪些模块和库是与入口相依赖的。</p><p>我们可以在webpack配置中配置entry属性，来设置一个或多个入口起点。以下是一个简单的entry配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'path/to/your/entry/index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure></p><h2 id="2-2-出口（output）"><a href="#2-2-出口（output）" class="headerlink" title="2.2 出口（output）"></a>2.2 出口（output）</h2><p> 设置output是为了告诉webpack要在哪里输出其创建的bundle，并且可以对bundle命名。示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'path/to/your/entry/index.js'</span></span><br><span class="line">  &#125;，  </span><br><span class="line">  output: &#123;</span><br><span class="line">    filename:<span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname,<span class="string">'./dist'</span>)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><p>我们通过 output.filename 来设置输出bundle的文件名， output.path 来设置 bundle 的输出路径 </p><blockquote><p>path 是 nodeJs 中的核心模块，用来处理项目中的路径。</p></blockquote><h2 id="2-3-loader"><a href="#2-3-loader" class="headerlink" title="2.3 loader"></a>2.3 loader</h2><p>由于 webpack 只认识 JavaScript 代码，因此就需要借助其他方法来处理那些非 JavaScript 文件，如 css、image、font等。而 loader 可以将所有类型的文件处理成 webpack 能够识别的有效模块，然后再对其进行处理。</p><h5 id="loader-中有两个重要属性："><a href="#loader-中有两个重要属性：" class="headerlink" title="loader 中有两个重要属性："></a>loader 中有两个重要属性：</h5><ol><li>test属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件，通常是一个正则表达式；</li><li>use属性，表示进行转换时，应该使用哪个 loader；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'path/to/your/entry/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ejs$/</span>,</span><br><span class="line">        use: [<span class="string">'ejs-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure></li></ol><p>以上示例中loader的配置相当于告诉webpack在遇到 .ejs 的文件时，在打包之前先用 ejs-loader 装换一下。</p><h2 id="2-4-插件（plugins）"><a href="#2-4-插件（plugins）" class="headerlink" title="2.4 插件（plugins）"></a>2.4 插件（plugins）</h2><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。想要使用一个插件，你只需要require()它，然后把它添加到plugins数组中。多数插件可以通过选项(option)自定义。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">// 通过 npm 安装</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'path/to/your/entry/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ejs$/</span>,</span><br><span class="line">        use: [<span class="string">'ejs-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'webpack demo'</span>,</span><br><span class="line">      template: path.join(__dirname, <span class="string">'./index.html'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure></p><p>HtmlWebpackPlugin 将为你生成一个 HTML5 文件， 其中包括使用script标签的 body 中的所有 webpack 包，webpack 提供提供了许多功能强大的插件，查阅<a href="https://www.webpackjs.com/plugins" target="_blank" rel="noopener">插件列表</a>获取更多插件的使用方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-什么是webpack&quot;&gt;&lt;a href=&quot;#1-什么是webpack&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是webpack&quot;&gt;&lt;/a&gt;1. 什么是webpack&lt;/h1&gt;&lt;p&gt;先来看看&lt;a href=&quot;https://www.web
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="http://aventador.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/webpack/"/>
    
    
      <category term="webpack" scheme="http://aventador.top/tags/webpack/"/>
    
  </entry>
  
</feed>
